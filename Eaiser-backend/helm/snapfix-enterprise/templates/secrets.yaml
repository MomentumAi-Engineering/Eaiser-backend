{{/*
üîê SnapFix Enterprise - Kubernetes Secrets Configuration
This file defines all sensitive configuration data for the application
*/}}

{{/*
üîë Main Application Secrets
*/}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "snapfix-enterprise.fullname" . }}-app-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "snapfix-enterprise.labels" . | nindent 4 }}
    app.kubernetes.io/component: secrets
    app.kubernetes.io/part-of: snapfix-enterprise
  annotations:
    # Secret management annotations
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation
    # Backup and rotation annotations
    "backup.velero.io/backup-volumes": "true"
    "secret.reloader.stakater.com/reload": "{{ include "snapfix-enterprise.fullname" . }}-deployment"
type: Opaque
data:
  # ========================================
  # DATABASE SECRETS
  # ========================================
  
  # PostgreSQL credentials
  {{- if .Values.postgresql.auth.password }}
  DB_PASSWORD: {{ .Values.postgresql.auth.password | b64enc | quote }}
  {{- else }}
  DB_PASSWORD: {{ randAlphaNum 32 | b64enc | quote }}
  {{- end }}
  
  {{- if .Values.postgresql.auth.postgresPassword }}
  DB_POSTGRES_PASSWORD: {{ .Values.postgresql.auth.postgresPassword | b64enc | quote }}
  {{- else }}
  DB_POSTGRES_PASSWORD: {{ randAlphaNum 32 | b64enc | quote }}
  {{- end }}
  
  {{- if .Values.postgresql.auth.replicationPassword }}
  DB_REPLICATION_PASSWORD: {{ .Values.postgresql.auth.replicationPassword | b64enc | quote }}
  {{- else }}
  DB_REPLICATION_PASSWORD: {{ randAlphaNum 32 | b64enc | quote }}
  {{- end }}
  
  # MongoDB credentials
  {{- if .Values.mongodb.auth.password }}
  MONGO_PASSWORD: {{ .Values.mongodb.auth.password | b64enc | quote }}
  {{- else }}
  MONGO_PASSWORD: {{ randAlphaNum 32 | b64enc | quote }}
  {{- end }}
  
  {{- if .Values.mongodb.auth.rootPassword }}
  MONGO_ROOT_PASSWORD: {{ .Values.mongodb.auth.rootPassword | b64enc | quote }}
  {{- else }}
  MONGO_ROOT_PASSWORD: {{ randAlphaNum 32 | b64enc | quote }}
  {{- end }}
  
  {{- if .Values.mongodb.auth.replicaSetKey }}
  MONGO_REPLICA_SET_KEY: {{ .Values.mongodb.auth.replicaSetKey | b64enc | quote }}
  {{- else }}
  MONGO_REPLICA_SET_KEY: {{ randAlphaNum 64 | b64enc | quote }}
  {{- end }}
  
  # ========================================
  # CACHE & MESSAGE QUEUE SECRETS
  # ========================================
  
  # Redis credentials
  {{- if .Values.redis.auth.password }}
  REDIS_PASSWORD: {{ .Values.redis.auth.password | b64enc | quote }}
  {{- else }}
  REDIS_PASSWORD: {{ randAlphaNum 32 | b64enc | quote }}
  {{- end }}
  
  # RabbitMQ credentials
  {{- if .Values.rabbitmq.auth.password }}
  RABBITMQ_PASSWORD: {{ .Values.rabbitmq.auth.password | b64enc | quote }}
  {{- else }}
  RABBITMQ_PASSWORD: {{ randAlphaNum 32 | b64enc | quote }}
  {{- end }}
  
  {{- if .Values.rabbitmq.auth.erlangCookie }}
  RABBITMQ_ERLANG_COOKIE: {{ .Values.rabbitmq.auth.erlangCookie | b64enc | quote }}
  {{- else }}
  RABBITMQ_ERLANG_COOKIE: {{ randAlphaNum 64 | b64enc | quote }}
  {{- end }}
  
  # ========================================
  # APPLICATION SECURITY SECRETS
  # ========================================
  
  # JWT secrets
  {{- if .Values.app.jwt.secretKey }}
  JWT_SECRET_KEY: {{ .Values.app.jwt.secretKey | b64enc | quote }}
  {{- else }}
  JWT_SECRET_KEY: {{ randAlphaNum 64 | b64enc | quote }}
  {{- end }}
  
  {{- if .Values.app.jwt.refreshSecretKey }}
  JWT_REFRESH_SECRET_KEY: {{ .Values.app.jwt.refreshSecretKey | b64enc | quote }}
  {{- else }}
  JWT_REFRESH_SECRET_KEY: {{ randAlphaNum 64 | b64enc | quote }}
  {{- end }}
  
  # Application secret key
  {{- if .Values.app.secretKey }}
  SECRET_KEY: {{ .Values.app.secretKey | b64enc | quote }}
  {{- else }}
  SECRET_KEY: {{ randAlphaNum 64 | b64enc | quote }}
  {{- end }}
  
  # Encryption keys
  {{- if .Values.app.encryptionKey }}
  ENCRYPTION_KEY: {{ .Values.app.encryptionKey | b64enc | quote }}
  {{- else }}
  ENCRYPTION_KEY: {{ randAlphaNum 32 | b64enc | quote }}
  {{- end }}
  
  # Session secret
  {{- if .Values.app.sessionSecret }}
  SESSION_SECRET: {{ .Values.app.sessionSecret | b64enc | quote }}
  {{- else }}
  SESSION_SECRET: {{ randAlphaNum 64 | b64enc | quote }}
  {{- end }}
  
  # ========================================
  # EXTERNAL SERVICE SECRETS
  # ========================================
  
  # Email service credentials
  {{- if .Values.app.email.username }}
  EMAIL_USERNAME: {{ .Values.app.email.username | b64enc | quote }}
  {{- end }}
  {{- if .Values.app.email.password }}
  EMAIL_PASSWORD: {{ .Values.app.email.password | b64enc | quote }}
  {{- end }}
  
  # SMS service credentials (Twilio)
  {{- if .Values.app.sms.accountSid }}
  TWILIO_ACCOUNT_SID: {{ .Values.app.sms.accountSid | b64enc | quote }}
  {{- end }}
  {{- if .Values.app.sms.authToken }}
  TWILIO_AUTH_TOKEN: {{ .Values.app.sms.authToken | b64enc | quote }}
  {{- end }}
  
  # Cloud storage credentials (AWS S3)
  {{- if .Values.app.storage.accessKeyId }}
  AWS_ACCESS_KEY_ID: {{ .Values.app.storage.accessKeyId | b64enc | quote }}
  {{- end }}
  {{- if .Values.app.storage.secretAccessKey }}
  AWS_SECRET_ACCESS_KEY: {{ .Values.app.storage.secretAccessKey | b64enc | quote }}
  {{- end }}
  
  # Social login secrets
  {{- if .Values.app.socialLogin.google.clientSecret }}
  GOOGLE_OAUTH_CLIENT_SECRET: {{ .Values.app.socialLogin.google.clientSecret | b64enc | quote }}
  {{- end }}
  {{- if .Values.app.socialLogin.facebook.appSecret }}
  FACEBOOK_APP_SECRET: {{ .Values.app.socialLogin.facebook.appSecret | b64enc | quote }}
  {{- end }}
  {{- if .Values.app.socialLogin.github.clientSecret }}
  GITHUB_CLIENT_SECRET: {{ .Values.app.socialLogin.github.clientSecret | b64enc | quote }}
  {{- end }}
  
  # Payment gateway secrets
  {{- if .Values.app.payment.stripe.secretKey }}
  STRIPE_SECRET_KEY: {{ .Values.app.payment.stripe.secretKey | b64enc | quote }}
  {{- end }}
  {{- if .Values.app.payment.stripe.webhookSecret }}
  STRIPE_WEBHOOK_SECRET: {{ .Values.app.payment.stripe.webhookSecret | b64enc | quote }}
  {{- end }}
  {{- if .Values.app.payment.paypal.clientSecret }}
  PAYPAL_CLIENT_SECRET: {{ .Values.app.payment.paypal.clientSecret | b64enc | quote }}
  {{- end }}
  
  # AI/ML service secrets
  {{- if .Values.app.openai.apiKey }}
  OPENAI_API_KEY: {{ .Values.app.openai.apiKey | b64enc | quote }}
  {{- end }}
  {{- if .Values.app.ai.apiKey }}
  AI_SERVICE_API_KEY: {{ .Values.app.ai.apiKey | b64enc | quote }}
  {{- end }}
  
  # Webhook secrets
  {{- if .Values.app.webhooks.secret }}
  WEBHOOK_SECRET: {{ .Values.app.webhooks.secret | b64enc | quote }}
  {{- else }}
  WEBHOOK_SECRET: {{ randAlphaNum 64 | b64enc | quote }}
  {{- end }}
  
  # API keys for external integrations
  {{- if .Values.app.integrations.slack.botToken }}
  SLACK_BOT_TOKEN: {{ .Values.app.integrations.slack.botToken | b64enc | quote }}
  {{- end }}
  {{- if .Values.app.integrations.discord.botToken }}
  DISCORD_BOT_TOKEN: {{ .Values.app.integrations.discord.botToken | b64enc | quote }}
  {{- end }}
  {{- if .Values.app.integrations.teams.webhookUrl }}
  TEAMS_WEBHOOK_URL: {{ .Values.app.integrations.teams.webhookUrl | b64enc | quote }}
  {{- end }}

---
{{/*
üîê TLS/SSL Certificates Secret
*/}}
{{- if .Values.ingress.tls.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "snapfix-enterprise.fullname" . }}-tls-certs
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "snapfix-enterprise.labels" . | nindent 4 }}
    app.kubernetes.io/component: tls
    app.kubernetes.io/part-of: snapfix-enterprise
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-4"
    "cert-manager.io/issuer": "{{ .Values.ingress.tls.issuer | default "letsencrypt-prod" }}"
type: kubernetes.io/tls
data:
  {{- if .Values.ingress.tls.crt }}
  tls.crt: {{ .Values.ingress.tls.crt | b64enc | quote }}
  {{- end }}
  {{- if .Values.ingress.tls.key }}
  tls.key: {{ .Values.ingress.tls.key | b64enc | quote }}
  {{- end }}
  {{- if .Values.ingress.tls.ca }}
  ca.crt: {{ .Values.ingress.tls.ca | b64enc | quote }}
  {{- end }}
{{- end }}

---
{{/*
üîê Docker Registry Credentials Secret
*/}}
{{- if .Values.imageCredentials.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "snapfix-enterprise.fullname" . }}-registry-creds
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "snapfix-enterprise.labels" . | nindent 4 }}
    app.kubernetes.io/component: registry
    app.kubernetes.io/part-of: snapfix-enterprise
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-6"
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ template "imagePullSecret" . }}
{{- end }}

---
{{/*
üîê Monitoring & Observability Secrets
*/}}
{{- if .Values.monitoring.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "snapfix-enterprise.fullname" . }}-monitoring-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "snapfix-enterprise.labels" . | nindent 4 }}
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: snapfix-enterprise
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-3"
type: Opaque
data:
  # Grafana admin credentials
  {{- if .Values.monitoring.grafana.adminPassword }}
  GRAFANA_ADMIN_PASSWORD: {{ .Values.monitoring.grafana.adminPassword | b64enc | quote }}
  {{- else }}
  GRAFANA_ADMIN_PASSWORD: {{ randAlphaNum 32 | b64enc | quote }}
  {{- end }}
  
  # Prometheus basic auth
  {{- if .Values.monitoring.prometheus.basicAuth.username }}
  PROMETHEUS_USERNAME: {{ .Values.monitoring.prometheus.basicAuth.username | b64enc | quote }}
  {{- end }}
  {{- if .Values.monitoring.prometheus.basicAuth.password }}
  PROMETHEUS_PASSWORD: {{ .Values.monitoring.prometheus.basicAuth.password | b64enc | quote }}
  {{- end }}
  
  # Elasticsearch credentials for logging
  {{- if .Values.logging.elasticsearch.username }}
  FLUENT_ELASTICSEARCH_USERNAME: {{ .Values.logging.elasticsearch.username | b64enc | quote }}
  {{- end }}
  {{- if .Values.logging.elasticsearch.password }}
  FLUENT_ELASTICSEARCH_PASSWORD: {{ .Values.logging.elasticsearch.password | b64enc | quote }}
  {{- end }}
  
  # Jaeger collector credentials
  {{- if .Values.tracing.jaeger.collector.username }}
  JAEGER_COLLECTOR_USERNAME: {{ .Values.tracing.jaeger.collector.username | b64enc | quote }}
  {{- end }}
  {{- if .Values.tracing.jaeger.collector.password }}
  JAEGER_COLLECTOR_PASSWORD: {{ .Values.tracing.jaeger.collector.password | b64enc | quote }}
  {{- end }}
{{- end }}

---
{{/*
üîê Backup & Disaster Recovery Secrets
*/}}
{{- if .Values.backup.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "snapfix-enterprise.fullname" . }}-backup-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "snapfix-enterprise.labels" . | nindent 4 }}
    app.kubernetes.io/component: backup
    app.kubernetes.io/part-of: snapfix-enterprise
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-2"
type: Opaque
data:
  # Velero backup credentials
  {{- if .Values.backup.velero.credentials.accessKeyId }}
  VELERO_ACCESS_KEY_ID: {{ .Values.backup.velero.credentials.accessKeyId | b64enc | quote }}
  {{- end }}
  {{- if .Values.backup.velero.credentials.secretAccessKey }}
  VELERO_SECRET_ACCESS_KEY: {{ .Values.backup.velero.credentials.secretAccessKey | b64enc | quote }}
  {{- end }}
  
  # Database backup encryption key
  {{- if .Values.backup.database.encryptionKey }}
  DB_BACKUP_ENCRYPTION_KEY: {{ .Values.backup.database.encryptionKey | b64enc | quote }}
  {{- else }}
  DB_BACKUP_ENCRYPTION_KEY: {{ randAlphaNum 64 | b64enc | quote }}
  {{- end }}
  
  # S3 backup bucket credentials
  {{- if .Values.backup.s3.accessKeyId }}
  BACKUP_S3_ACCESS_KEY_ID: {{ .Values.backup.s3.accessKeyId | b64enc | quote }}
  {{- end }}
  {{- if .Values.backup.s3.secretAccessKey }}
  BACKUP_S3_SECRET_ACCESS_KEY: {{ .Values.backup.s3.secretAccessKey | b64enc | quote }}
  {{- end }}
{{- end }}

{{/*
üîß Helper template for Docker registry credentials
*/}}
{{- define "imagePullSecret" }}
{{- with .Values.imageCredentials }}
{{- printf "{\"auths\":{\"%s\":{\"username\":\"%s\",\"password\":\"%s\",\"email\":\"%s\",\"auth\":\"%s\"}}}" .registry .username .password .email (printf "%s:%s" .username .password | b64enc) | b64enc }}
{{- end }}
{{- end }}