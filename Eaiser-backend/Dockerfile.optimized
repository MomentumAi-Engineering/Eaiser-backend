# Multi-stage Dockerfile for Production - Optimized for 1 Lakh+ Users
# This Dockerfile provides:
# - Multi-stage build for smaller image size
# - Python optimizations for performance
# - Security hardening
# - Health checks and monitoring
# - Efficient dependency management

# Stage 1: Build stage
FROM python:3.11-slim as builder

# Set build arguments
ARG BUILD_DATE
ARG VERSION
ARG VCS_REF

# Labels for metadata
LABEL maintainer="Eaiser Team" \
      version="${VERSION}" \
      description="Eaiser Backend API - Production Optimized" \
      build-date="${BUILD_DATE}" \
      vcs-ref="${VCS_REF}"

# Set environment variables for build
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    POETRY_NO_INTERACTION=1 \
    POETRY_VENV_IN_PROJECT=1 \
    POETRY_CACHE_DIR=/tmp/poetry_cache

# Install system dependencies for building
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN pip install --no-cache-dir pip==24.0

# Set work directory
WORKDIR /app

# Copy dependency files
COPY app/requirements.txt ./

# Install dependencies using pip
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Stage 2: Production stage
FROM python:3.11-slim as production

# Set production environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app \
    PATH="/app:$PATH" \
    ENV=production \
    PORT=10000 \
    WORKERS=4 \
    MAX_CONNECTIONS=1000 \
    KEEPALIVE=2 \
    TIMEOUT=30 \
    GRACEFUL_TIMEOUT=30

# Create non-root user for security
RUN groupadd -r eaiser && useradd -r -g eaiser eaiser

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    curl \
    dumb-init \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set work directory
WORKDIR /app

# Copy virtual environment from builder stage
COPY --from=builder /app /app

# Copy application code
COPY ./app /app/

# Create necessary directories
RUN mkdir -p /app/logs /app/temp /app/static && \
    chown -R eaiser:eaiser /app && \
    chmod -R 755 /app

# Copy application files
COPY app/main_optimized.py /app/main.py
COPY app/services/ /app/services/
COPY app/routers/ /app/routers/

# Create startup script
RUN echo '#!/bin/bash' > /app/start.sh && \
    echo 'set -e' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# Function to handle graceful shutdown' >> /app/start.sh && \
    echo 'shutdown() {' >> /app/start.sh && \
    echo '    echo "Received shutdown signal, gracefully stopping..."' >> /app/start.sh && \
    echo '    kill -TERM "$child" 2>/dev/null' >> /app/start.sh && \
    echo '    wait "$child"' >> /app/start.sh && \
    echo '    exit 0' >> /app/start.sh && \
    echo '}' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# Set up signal handlers' >> /app/start.sh && \
    echo 'trap shutdown SIGTERM SIGINT' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# Wait for dependencies' >> /app/start.sh && \
    echo 'echo "Waiting for dependencies..."' >> /app/start.sh && \
    echo 'until curl -f http://${REDIS_HOST:-redis-node-1}:${REDIS_PORT:-6379}/ping 2>/dev/null; do' >> /app/start.sh && \
    echo '    echo "Waiting for Redis..."' >> /app/start.sh && \
    echo '    sleep 2' >> /app/start.sh && \
    echo 'done' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo 'echo "Starting Eaiser Backend API..."' >> /app/start.sh && \
    echo 'echo "Environment: ${ENV}"' >> /app/start.sh && \
    echo 'echo "Port: ${PORT}"' >> /app/start.sh && \
    echo 'echo "Workers: ${WORKERS}"' >> /app/start.sh && \
    echo 'echo "Max Connections: ${MAX_CONNECTIONS}"' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo '# Start the application with optimized settings' >> /app/start.sh && \
    echo 'exec uvicorn main_optimized:app \' >> /app/start.sh && \
    echo '    --host 0.0.0.0 \' >> /app/start.sh && \
    echo '    --port ${PORT} \' >> /app/start.sh && \
    echo '    --workers ${WORKERS} \' >> /app/start.sh && \
    echo '    --max-requests 1000 \' >> /app/start.sh && \
    echo '    --max-requests-jitter 100 \' >> /app/start.sh && \
    echo '    --timeout-keep-alive ${KEEPALIVE} \' >> /app/start.sh && \
    echo '    --timeout-graceful-shutdown ${GRACEFUL_TIMEOUT} \' >> /app/start.sh && \
    echo '    --access-log \' >> /app/start.sh && \
    echo '    --log-level info \' >> /app/start.sh && \
    echo '    --loop uvloop \' >> /app/start.sh && \
    echo '    --http httptools &' >> /app/start.sh && \
    echo '' >> /app/start.sh && \
    echo 'child=$!' >> /app/start.sh && \
    echo 'wait "$child"' >> /app/start.sh

# Make startup script executable
RUN chmod +x /app/start.sh

# Create health check script
RUN echo '#!/bin/bash' > /app/healthcheck.sh && \
    echo 'set -e' >> /app/healthcheck.sh && \
    echo '' >> /app/healthcheck.sh && \
    echo '# Health check with timeout' >> /app/healthcheck.sh && \
    echo 'timeout 10 curl -f http://localhost:${PORT}/health || exit 1' >> /app/healthcheck.sh && \
    echo '' >> /app/healthcheck.sh && \
    echo '# Check if process is running' >> /app/healthcheck.sh && \
    echo 'pgrep -f "uvicorn main:app" > /dev/null || exit 1' >> /app/healthcheck.sh && \
    echo '' >> /app/healthcheck.sh && \
    echo 'echo "Health check passed"' >> /app/healthcheck.sh

RUN chmod +x /app/healthcheck.sh

# Switch to non-root user
USER eaiser

# Expose port
EXPOSE ${PORT}

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD /app/healthcheck.sh

# Use dumb-init to handle signals properly
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start the application
CMD ["/app/start.sh"]

# Metadata
LABEL org.opencontainers.image.title="Eaiser Backend API" \
      org.opencontainers.image.description="High-performance FastAPI backend for 1 lakh+ users" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.vendor="Eaiser Team" \
      org.opencontainers.image.licenses="MIT"
