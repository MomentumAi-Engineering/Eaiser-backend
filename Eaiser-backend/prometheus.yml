# ðŸš€ Prometheus Configuration for SnapFix Monitoring
# Monitors 1 lakh concurrent users with comprehensive metrics

global:
  scrape_interval: 15s      # Scrape targets every 15 seconds
  evaluation_interval: 15s  # Evaluate rules every 15 seconds
  external_labels:
    cluster: 'snapfix-production'
    environment: 'production'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Load rules once and periodically evaluate them
rule_files:
  - "snapfix_alerts.yml"
  - "snapfix_recording_rules.yml"

# Scrape configuration
scrape_configs:
  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 30s
    metrics_path: /metrics

  # SnapFix FastAPI instances
  - job_name: 'snapfix-api'
    static_configs:
      - targets:
        - 'snapfix-api-1:10000'
        - 'snapfix-api-2:10000'
        - 'snapfix-api-3:10000'
        - 'snapfix-api-4:10000'
        - 'snapfix-api-5:10000'
    scrape_interval: 10s
    metrics_path: /metrics
    scrape_timeout: 5s
    honor_labels: true
    params:
      format: ['prometheus']

  # Nginx Load Balancer
  - job_name: 'nginx'
    static_configs:
      - targets: ['nginx:8080']
    scrape_interval: 15s
    metrics_path: /nginx_status
    honor_labels: true

  # MongoDB Monitoring
  - job_name: 'mongodb'
    static_configs:
      - targets:
        - 'mongo1:9216'
        - 'mongo2:9216'
        - 'mongo3:9216'
    scrape_interval: 30s
    metrics_path: /metrics
    honor_labels: true

  # Redis Monitoring
  - job_name: 'redis'
    static_configs:
      - targets: ['redis-cluster:9121']
    scrape_interval: 15s
    metrics_path: /metrics
    honor_labels: true

  # RabbitMQ Monitoring
  - job_name: 'rabbitmq'
    static_configs:
      - targets: ['rabbitmq:15692']
    scrape_interval: 30s
    metrics_path: /metrics
    honor_labels: true

  # Celery Workers Monitoring
  - job_name: 'celery'
    static_configs:
      - targets: ['celery-worker:8888']
    scrape_interval: 20s
    metrics_path: /metrics
    honor_labels: true

  # Node Exporter (System Metrics)
  - job_name: 'node-exporter'
    static_configs:
      - targets:
        - 'node-exporter-1:9100'
        - 'node-exporter-2:9100'
        - 'node-exporter-3:9100'
    scrape_interval: 15s
    metrics_path: /metrics
    honor_labels: true

  # cAdvisor (Container Metrics)
  - job_name: 'cadvisor'
    static_configs:
      - targets:
        - 'cadvisor-1:8080'
        - 'cadvisor-2:8080'
        - 'cadvisor-3:8080'
    scrape_interval: 15s
    metrics_path: /metrics
    honor_labels: true

  # Kubernetes API Server (if using K8s)
  - job_name: 'kubernetes-apiservers'
    kubernetes_sd_configs:
    - role: endpoints
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
    - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
      action: keep
      regex: default;kubernetes;https

  # Kubernetes Nodes (if using K8s)
  - job_name: 'kubernetes-nodes'
    kubernetes_sd_configs:
    - role: node
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
    - action: labelmap
      regex: __meta_kubernetes_node_label_(.+)
    - target_label: __address__
      replacement: kubernetes.default.svc:443
    - source_labels: [__meta_kubernetes_node_name]
      regex: (.+)
      target_label: __metrics_path__
      replacement: /api/v1/nodes/${1}/proxy/metrics

  # Kubernetes Pods (if using K8s)
  - job_name: 'kubernetes-pods'
    kubernetes_sd_configs:
    - role: pod
    relabel_configs:
    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
      action: keep
      regex: true
    - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
      action: replace
      target_label: __metrics_path__
      regex: (.+)
    - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
      action: replace
      regex: ([^:]+)(?::\d+)?;(\d+)
      replacement: $1:$2
      target_label: __address__
    - action: labelmap
      regex: __meta_kubernetes_pod_label_(.+)
    - source_labels: [__meta_kubernetes_namespace]
      action: replace
      target_label: kubernetes_namespace
    - source_labels: [__meta_kubernetes_pod_name]
      action: replace
      target_label: kubernetes_pod_name

  # Custom Application Metrics
  - job_name: 'snapfix-custom-metrics'
    static_configs:
      - targets: ['snapfix-metrics-exporter:8000']
    scrape_interval: 10s
    metrics_path: /metrics
    honor_labels: true
    params:
      collect[]:
        - snapfix_issues_total
        - snapfix_users_active
        - snapfix_response_time
        - snapfix_error_rate
        - snapfix_throughput

# Remote write configuration (for long-term storage)
remote_write:
  - url: "https://prometheus-remote-write.snapfix.com/api/v1/write"
    basic_auth:
      username: "snapfix"
      password: "snapfix_remote_write_password"
    write_relabel_configs:
      - source_labels: [__name__]
        regex: 'snapfix_.*'
        action: keep

# Remote read configuration
remote_read:
  - url: "https://prometheus-remote-read.snapfix.com/api/v1/read"
    basic_auth:
      username: "snapfix"
      password: "snapfix_remote_read_password"

# Storage configuration
storage:
  tsdb:
    retention.time: 30d      # Keep data for 30 days
    retention.size: 100GB    # Maximum storage size
    wal-compression: true    # Enable WAL compression