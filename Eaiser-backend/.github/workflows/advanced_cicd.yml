# 🚀 SnapFix Enterprise Advanced CI/CD Pipeline
# 🎯 Comprehensive DevOps Automation for 100,000+ Users
# 📊 Multi-Stage Testing, Security Scanning & Deployment
# 🔧 Kubernetes, Docker, Performance & Security Validation

name: SnapFix Enterprise CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      deployment_environment:
        description: 'Target deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - performance-test
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  # Global environment variables
  REGISTRY: ghcr.io
  IMAGE_NAME: snapfix-enterprise
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  
  # Security and compliance
  SECURITY_SCAN_ENABLED: true
  PERFORMANCE_TEST_ENABLED: true
  LOAD_TEST_USERS: 10000
  
  # Kubernetes configuration
  KUBE_NAMESPACE: snapfix-enterprise
  HELM_VERSION: v3.12.0
  
  # Monitoring and observability
  ENABLE_MONITORING: true
  PROMETHEUS_ENABLED: true
  GRAFANA_ENABLED: true

jobs:
  # ========================================
  # CODE QUALITY & SECURITY ANALYSIS
  # ========================================
  code-quality:
    name: 🔍 Code Quality & Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install bandit safety black flake8 mypy pytest-cov
    
    - name: 🎨 Code Formatting Check (Black)
      run: |
        black --check --diff .
        echo "✅ Code formatting validation passed"
    
    - name: 🔍 Linting (Flake8)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        echo "✅ Code linting validation passed"
    
    - name: 🔒 Security Scan (Bandit)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
        echo "✅ Security scan completed"
    
    - name: 🛡️ Dependency Security Check (Safety)
      run: |
        safety check --json --output safety-report.json || true
        safety check
        echo "✅ Dependency security check completed"
    
    - name: 📊 Type Checking (MyPy)
      run: |
        mypy . --ignore-missing-imports --no-strict-optional
        echo "✅ Type checking validation passed"
    
    - name: 📈 Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # ========================================
  # COMPREHENSIVE TESTING SUITE
  # ========================================
  testing:
    name: 🧪 Comprehensive Testing Suite
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: code-quality
    if: ${{ !inputs.skip_tests }}
    
    services:
      # Test database
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: snapfix_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      # Test Redis
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      # Test MongoDB
      mongodb:
        image: mongo:6
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
    
    strategy:
      matrix:
        test-type: [unit, integration, api, security]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock
    
    - name: 🔧 Setup Test Environment
      run: |
        cp .env.test.example .env.test
        export DATABASE_URL="postgresql://testuser:testpass@localhost:5432/snapfix_test"
        export REDIS_URL="redis://localhost:6379/0"
        export MONGODB_URL="mongodb://testuser:testpass@localhost:27017/snapfix_test"
    
    - name: 🧪 Run Unit Tests
      if: matrix.test-type == 'unit'
      run: |
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html
        echo "✅ Unit tests completed"
    
    - name: 🔗 Run Integration Tests
      if: matrix.test-type == 'integration'
      run: |
        pytest tests/integration/ -v --cov=app --cov-append --cov-report=xml
        echo "✅ Integration tests completed"
    
    - name: 🌐 Run API Tests
      if: matrix.test-type == 'api'
      run: |
        pytest tests/api/ -v --cov=app --cov-append --cov-report=xml
        echo "✅ API tests completed"
    
    - name: 🔒 Run Security Tests
      if: matrix.test-type == 'security'
      run: |
        pytest tests/security/ -v
        echo "✅ Security tests completed"
    
    - name: 📊 Upload Coverage Reports
      uses: codecov/codecov-action@v3
      if: matrix.test-type == 'unit'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: 📈 Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          htmlcov/
          coverage.xml
          pytest-report.xml
        retention-days: 30

  # ========================================
  # DOCKER BUILD & SECURITY SCAN
  # ========================================
  docker-build:
    name: 🐳 Docker Build & Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [code-quality, testing]
    if: always() && (needs.code-quality.result == 'success' && (needs.testing.result == 'success' || inputs.skip_tests))
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🏷️ Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 🔨 Build and Push Docker Image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
    
    - name: 🛡️ Run Trivy Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 📊 Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: 🔍 Container Structure Test
      run: |
        curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
        chmod +x container-structure-test-linux-amd64
        sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
        container-structure-test test --image ${{ steps.meta.outputs.tags }} --config container-structure-test.yaml

  # ========================================
  # PERFORMANCE & LOAD TESTING
  # ========================================
  performance-testing:
    name: 🚀 Performance & Load Testing
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: docker-build
    if: ${{ env.PERFORMANCE_TEST_ENABLED == 'true' && (github.ref == 'refs/heads/main' || inputs.deployment_environment == 'performance-test') }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 🔧 Setup Performance Test Environment
      run: |
        docker-compose -f docker-compose.performance.yml up -d
        sleep 30  # Wait for services to be ready
    
    - name: 📦 Install Load Testing Tools
      run: |
        pip install locust pytest-benchmark
        npm install -g artillery
    
    - name: 🏃‍♂️ Run Load Tests
      run: |
        cd testing
        python advanced_load_tester.py --users ${{ env.LOAD_TEST_USERS }} --duration 300
        echo "✅ Load testing completed"
    
    - name: 🎯 Run Artillery Performance Tests
      run: |
        artillery run testing/artillery-config.yml --output performance-report.json
        artillery report performance-report.json --output performance-report.html
    
    - name: 📊 Performance Benchmarks
      run: |
        pytest tests/performance/ --benchmark-json=benchmark-results.json
    
    - name: 📈 Upload Performance Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-reports
        path: |
          performance-report.html
          benchmark-results.json
          load_test_reports/
        retention-days: 30
    
    - name: 🧹 Cleanup Test Environment
      if: always()
      run: |
        docker-compose -f docker-compose.performance.yml down -v

  # ========================================
  # KUBERNETES DEPLOYMENT VALIDATION
  # ========================================
  k8s-validation:
    name: ☸️ Kubernetes Deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: docker-build
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Kubernetes Tools
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Install Helm
        curl https://get.helm.sh/helm-${{ env.HELM_VERSION }}-linux-amd64.tar.gz | tar xz
        sudo mv linux-amd64/helm /usr/local/bin/
        
        # Install kubeval for validation
        curl -L https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
        sudo mv kubeval /usr/local/bin/
    
    - name: 🔍 Validate Kubernetes Manifests
      run: |
        # Validate YAML syntax
        find k8s/ -name '*.yaml' -o -name '*.yml' | xargs kubeval
        echo "✅ Kubernetes manifests validation passed"
    
    - name: 🎯 Helm Chart Validation
      run: |
        cd helm/snapfix-enterprise
        helm dependency update
        helm lint .
        helm template . --debug --dry-run
        echo "✅ Helm chart validation passed"
    
    - name: 🔒 Security Policy Validation
      run: |
        # Install OPA Conftest
        curl -L https://github.com/open-policy-agent/conftest/releases/latest/download/conftest_linux_x86_64.tar.gz | tar xz
        sudo mv conftest /usr/local/bin/
        
        # Run security policy tests
        conftest test --policy security-policies/ k8s/
        echo "✅ Security policy validation passed"

  # ========================================
  # STAGING DEPLOYMENT
  # ========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [docker-build, k8s-validation]
    if: github.ref == 'refs/heads/develop' || inputs.deployment_environment == 'staging'
    environment:
      name: staging
      url: https://staging.snapfix.enterprise.com
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Kubernetes Context
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context
    
    - name: 🚀 Deploy to Staging
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update image tag in deployment
        kubectl set image deployment/snapfix-api snapfix-api=${{ needs.docker-build.outputs.image-tag }} -n ${{ env.KUBE_NAMESPACE }}-staging
        
        # Wait for rollout to complete
        kubectl rollout status deployment/snapfix-api -n ${{ env.KUBE_NAMESPACE }}-staging --timeout=600s
        
        echo "✅ Staging deployment completed"
    
    - name: 🔍 Post-Deployment Health Check
      run: |
        export KUBECONFIG=kubeconfig
        
        # Check pod status
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }}-staging
        
        # Run health check
        kubectl run health-check --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://snapfix-api-service.${{ env.KUBE_NAMESPACE }}-staging.svc.cluster.local:8000/health
        
        echo "✅ Health check passed"
    
    - name: 🧪 Run Smoke Tests
      run: |
        cd tests/smoke
        python smoke_tests.py --environment staging
        echo "✅ Smoke tests passed"

  # ========================================
  # PRODUCTION DEPLOYMENT
  # ========================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [docker-build, k8s-validation, performance-testing]
    if: (github.ref == 'refs/heads/main' || inputs.deployment_environment == 'production') && (needs.performance-testing.result == 'success' || inputs.force_deploy)
    environment:
      name: production
      url: https://snapfix.enterprise.com
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Production Kubernetes Context
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context
    
    - name: 📊 Pre-Deployment Monitoring Setup
      run: |
        # Setup monitoring alerts for deployment
        curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
          -H 'Content-type: application/json' \
          --data '{"text":"🚀 Starting production deployment for SnapFix Enterprise"}'
    
    - name: 🔄 Blue-Green Deployment
      run: |
        export KUBECONFIG=kubeconfig
        
        # Create new deployment version (green)
        kubectl patch deployment snapfix-api -n ${{ env.KUBE_NAMESPACE }} \
          -p '{"spec":{"template":{"metadata":{"labels":{"version":"green"}}}}}'
        
        # Update image
        kubectl set image deployment/snapfix-api snapfix-api=${{ needs.docker-build.outputs.image-tag }} -n ${{ env.KUBE_NAMESPACE }}
        
        # Wait for rollout
        kubectl rollout status deployment/snapfix-api -n ${{ env.KUBE_NAMESPACE }} --timeout=900s
        
        echo "✅ Blue-green deployment completed"
    
    - name: 🔍 Production Health Validation
      run: |
        export KUBECONFIG=kubeconfig
        
        # Comprehensive health checks
        kubectl get pods -n ${{ env.KUBE_NAMESPACE }}
        
        # API health check
        kubectl run prod-health-check --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://snapfix-api-service.${{ env.KUBE_NAMESPACE }}.svc.cluster.local:8000/health
        
        # Database connectivity check
        kubectl run db-check --image=curlimages/curl --rm -i --restart=Never -- \
          curl -f http://snapfix-api-service.${{ env.KUBE_NAMESPACE }}.svc.cluster.local:8000/health/db
        
        echo "✅ Production health validation passed"
    
    - name: 🧪 Production Smoke Tests
      run: |
        cd tests/smoke
        python smoke_tests.py --environment production --critical-only
        echo "✅ Production smoke tests passed"
    
    - name: 📊 Post-Deployment Monitoring
      run: |
        # Send success notification
        curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
          -H 'Content-type: application/json' \
          --data '{"text":"✅ Production deployment successful for SnapFix Enterprise"}'
        
        # Trigger monitoring alerts
        curl -X POST "${{ secrets.PROMETHEUS_WEBHOOK_URL }}" \
          -H 'Content-type: application/json' \
          --data '{"status":"deployment_success","version":"${{ github.sha }}"}'

  # ========================================
  # ROLLBACK CAPABILITY
  # ========================================
  rollback-production:
    name: 🔄 Production Rollback
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: deploy-production
    if: failure() && github.ref == 'refs/heads/main'
    environment:
      name: production
    
    steps:
    - name: 🔧 Setup Kubernetes Context
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
    
    - name: 🔄 Execute Rollback
      run: |
        export KUBECONFIG=kubeconfig
        
        # Rollback to previous version
        kubectl rollout undo deployment/snapfix-api -n ${{ env.KUBE_NAMESPACE }}
        
        # Wait for rollback to complete
        kubectl rollout status deployment/snapfix-api -n ${{ env.KUBE_NAMESPACE }} --timeout=600s
        
        echo "✅ Rollback completed"
    
    - name: 📊 Rollback Notification
      run: |
        curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
          -H 'Content-type: application/json' \
          --data '{"text":"⚠️ Production rollback executed for SnapFix Enterprise due to deployment failure"}'

  # ========================================
  # CLEANUP & REPORTING
  # ========================================
  cleanup-and-report:
    name: 🧹 Cleanup & Generate Reports
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, testing, docker-build, performance-testing, deploy-production]
    if: always()
    
    steps:
    - name: 📥 Download All Artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
    
    - name: 📊 Generate Comprehensive Report
      run: |
        # Create comprehensive pipeline report
        cat > pipeline-report.md << EOF
        # 🚀 SnapFix Enterprise CI/CD Pipeline Report
        
        ## 📊 Pipeline Summary
        - **Commit**: ${{ github.sha }}
        - **Branch**: ${{ github.ref_name }}
        - **Triggered by**: ${{ github.event_name }}
        - **Run ID**: ${{ github.run_id }}
        - **Timestamp**: $(date -u)
        
        ## 🧪 Test Results
        - **Code Quality**: ${{ needs.code-quality.result }}
        - **Testing Suite**: ${{ needs.testing.result }}
        - **Docker Build**: ${{ needs.docker-build.result }}
        - **Performance Tests**: ${{ needs.performance-testing.result }}
        - **Production Deploy**: ${{ needs.deploy-production.result }}
        
        ## 🔍 Security Scan Results
        - Security scans completed
        - Dependency checks passed
        - Container security validated
        
        ## 📈 Performance Metrics
        - Load test completed with ${{ env.LOAD_TEST_USERS }} users
        - Performance benchmarks executed
        - System scalability validated
        
        ## 🚀 Deployment Status
        - Staging: Deployed
        - Production: ${{ needs.deploy-production.result == 'success' && 'Deployed' || 'Not Deployed' }}
        
        ---
        Generated by SnapFix Enterprise CI/CD Pipeline
        EOF
    
    - name: 📤 Upload Pipeline Report
      uses: actions/upload-artifact@v3
      with:
        name: pipeline-report
        path: pipeline-report.md
        retention-days: 90
    
    - name: 🧹 Cleanup Docker Images
      run: |
        # Cleanup old Docker images to save space
        docker system prune -af --filter "until=24h"
        echo "✅ Docker cleanup completed"
    
    - name: 📊 Final Notification
      if: always()
      run: |
        STATUS="${{ job.status }}"
        if [ "$STATUS" = "success" ]; then
          EMOJI="✅"
          MESSAGE="CI/CD Pipeline completed successfully"
        else
          EMOJI="❌"
          MESSAGE="CI/CD Pipeline failed"
        fi
        
        curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
          -H 'Content-type: application/json' \
          --data "{\"text\":\"$EMOJI $MESSAGE for SnapFix Enterprise\\nCommit: ${{ github.sha }}\\nBranch: ${{ github.ref_name }}\"}"

# ========================================
# WORKFLOW CONFIGURATION
# ========================================
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Security settings
permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  checks: write
  deployments: write
  issues: write
  pull-requests: write

# Environment protection rules are configured in GitHub repository settings
# Production environment requires manual approval and has deployment protection rules